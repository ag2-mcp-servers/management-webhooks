# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T09:03:59+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Dict, List, Optional

from pydantic import BaseModel, Field


class AccountNotificationResponse(BaseModel):
    notificationResponse: Optional[str] = Field(
        None,
        description='Respond with **HTTP 200 OK** and `[accepted]` in the response body to [accept the webhook](https://docs.adyen.com/development-resources/webhooks#accept-notifications).',
    )


class Type(Enum):
    BankAccount = 'BankAccount'
    Document = 'Document'
    LegalEntity = 'LegalEntity'


class CapabilityProblemEntityRecursive(BaseModel):
    id: Optional[str] = Field(None, description='The ID of the entity.')
    type: Optional[Type] = Field(
        None,
        description='The type of entity.\n\nPossible values: **LegalEntity**, **BankAccount**, or **Document**.',
    )


class Result(Enum):
    SUCCESS = 'SUCCESS'
    FAILURE = 'FAILURE'


class VerificationStatus(Enum):
    valid = 'valid'
    pending = 'pending'
    invalid = 'invalid'
    rejected = 'rejected'


class MidServiceNotificationData(BaseModel):
    allowed: Optional[bool] = Field(
        None,
        description='Indicates whether receiving payments is allowed. This value is set to **true** by Adyen after screening your merchant account.',
    )
    enabled: Optional[bool] = Field(
        None,
        description='Indicates whether the payment method is enabled (**true**) or disabled (**false**).',
    )
    id: str = Field(..., description='The identifier of the resource.')
    merchantId: str = Field(..., description='The identifier of the merchant account.')
    reference: Optional[str] = Field(
        None, description='Your reference for the payment method.'
    )
    result: Result = Field(
        ..., description='The result of the request to create a payment method.'
    )
    storeId: Optional[str] = Field(
        None,
        description='The identifier of the [store](https://docs.adyen.com/api-explorer/#/ManagementService/latest/post/merchants/{id}/paymentMethodSettings__reqParam_storeId), if any.',
    )
    type: str = Field(
        ...,
        description='Payment method [variant](https://docs.adyen.com/development-resources/paymentmethodvariant#management-api).',
    )
    verificationStatus: Optional[VerificationStatus] = Field(
        None,
        description='Payment method status. Possible values:\n* **valid**\n* **pending**\n* **invalid**\n* **rejected**',
    )


class NotificationDataMessageType3(BaseModel):
    createdAt: datetime = Field(
        ..., description='Timestamp for when the webhook was created.'
    )
    data: MidServiceNotificationData = Field(..., description='Contains event details.')
    environment: str = Field(
        ...,
        description='The environment from which the webhook originated.\n\nPossible values: **test**, **live**.',
    )
    type: str = Field(..., description='Type of notification.')


class PaymentMethodNotificationResponse(BaseModel):
    notificationResponse: Optional[str] = Field(
        None,
        description='Respond with **HTTP 200 OK** and `[accepted]` in the response body to [accept the webhook](https://docs.adyen.com/development-resources/webhooks#accept-notifications).',
    )


class RemediatingAction(BaseModel):
    code: Optional[str] = Field(None, description='The remediating action code.')
    message: Optional[str] = Field(
        None, description='A description of how you can resolve the verification error.'
    )


class Type2(Enum):
    dataMissing = 'dataMissing'
    invalidInput = 'invalidInput'
    pendingStatus = 'pendingStatus'


class VerificationErrorRecursive(BaseModel):
    code: Optional[str] = Field(None, description='The verification error code.')
    message: Optional[str] = Field(None, description='The verification error message.')
    remediatingActions: Optional[List[RemediatingAction]] = Field(
        None,
        description='The actions that you can take to resolve the verification error.',
    )
    type: Optional[Type2] = Field(
        None,
        description='The type of verification error.\n\nPossible values: **invalidInput**, **dataMissing**, and **pendingStatus**.',
    )


class CapabilityProblemEntity(BaseModel):
    id: Optional[str] = Field(None, description='The ID of the entity.')
    owner: Optional[CapabilityProblemEntityRecursive] = Field(
        None,
        description='The owner of the entity that has an error. For example, if the `entity.type` is **BankAccount**, then the `owner` contains the details of the legal entity that owns the bank account.',
    )
    type: Optional[Type] = Field(
        None,
        description='The type of entity.\n\nPossible values: **LegalEntity**, **BankAccount**, or **Document**.',
    )


class VerificationError(BaseModel):
    code: Optional[str] = Field(None, description='The verification error code.')
    message: Optional[str] = Field(None, description='The verification error message.')
    remediatingActions: Optional[List[RemediatingAction]] = Field(
        None,
        description='The actions that you can take to resolve the verification error.',
    )
    subErrors: Optional[List[VerificationErrorRecursive]] = Field(
        None, description='More granular information about the verification error.'
    )
    type: Optional[Type2] = Field(
        None,
        description='The type of verification error.\n\nPossible values: **invalidInput**, **dataMissing**, and **pendingStatus**.',
    )


class CapabilityProblem(BaseModel):
    entity: Optional[CapabilityProblemEntity] = Field(
        None, description='The ID and the type of entity that has verification errors.'
    )
    verificationErrors: Optional[List[VerificationError]] = Field(
        None, description='List of verification errors.'
    )


class AccountCapabilityData(BaseModel):
    allowed: Optional[bool] = Field(
        None,
        description='Indicates whether the capability is allowed. Adyen sets this to **true** if the verification is successful.',
    )
    allowedLevel: Optional[str] = Field(
        None,
        description='The allowed level of the capability. Some capabilities have different levels which correspond to thresholds. Higher levels may require additional checks and increased monitoring.Possible values: **notApplicable**, **low**, **medium**, **high**.',
    )
    capability: Optional[str] = Field(
        None,
        description='The name of the capability. For example, **sendToTransferInstrument**.',
    )
    problems: Optional[List[CapabilityProblem]] = Field(
        None,
        description='List of entities that has problems with verification. The information includes the details of the errors and the actions that you can take to resolve them.',
    )
    requested: bool = Field(
        ..., description='Indicates whether you requested the capability.'
    )
    requestedLevel: str = Field(
        ...,
        description='The level that you requested for the capability. Some capabilities have different levels which correspond to thresholds. Higher levels may require additional checks and increased monitoring.Possible values: **notApplicable**, **low**, **medium**, **high**.',
    )
    verificationStatus: Optional[str] = Field(
        None,
        description='The status of the verification checks for the capability.\n\nPossible values:\n\n* **pending**: Adyen is running the verification.\n\n* **invalid**: The verification failed. Check if the `errors` array contains more information.\n\n* **valid**: The verification was successful.\n\n* **rejected**: Adyen checked the information and found reasons to not allow the capability.\n',
    )


class AccountCreateNotificationData(BaseModel):
    capabilities: Dict[str, AccountCapabilityData] = Field(
        ...,
        description='Key-value pairs that specify the actions that the merchant account can do and its settings. The key is a capability. For example, the **sendToTransferInstrument** is the capability required before you can pay out funds to the bank account. The value is an object containing the settings for the capability.',
    )
    companyId: str = Field(
        ..., description='The unique identifier of the company account.'
    )
    legalEntityId: Optional[str] = Field(
        None,
        description='The unique identifier of the [legal entity](https://docs.adyen.com/api-explorer/legalentity/latest/post/legalEntities#responses-200-id).',
    )
    merchantId: str = Field(
        ..., description='The unique identifier of the merchant account.'
    )
    status: str = Field(
        ...,
        description='The status of the merchant account.\n\nPossible values:\n\n* **PreActive**: The merchant account has been created. Users cannot access the merchant account in the Customer Area. The account cannot process payments.\n* **Active**: Users can access the merchant account in the Customer Area. If the company account is also **Active**, then payment processing and payouts are enabled.\n* **InactiveWithModifications**: Users can access the merchant account in the Customer Area. The account cannot process new payments but can still modify payments, for example issue refunds. The account can still receive payouts.\n* **Inactive**: Users can access the merchant account in the Customer Area. Payment processing and payouts are disabled.\n* **Closed**: The account is closed and this cannot be reversed. Users cannot log in. Payment processing and payouts are disabled.',
    )


class AccountUpdateNotificationData(BaseModel):
    capabilities: Dict[str, AccountCapabilityData] = Field(
        ...,
        description='Key-value pairs that specify what you can do with the merchant account and its settings. The key is a capability. For example, the **sendToTransferInstrument** is the capability required before you can pay out the funds of a merchant account to a [bank account](https://docs.adyen.com/api-explorer/legalentity/latest/post/transferInstruments). The value is an object containing the settings for the capability.',
    )
    legalEntityId: Optional[str] = Field(
        None,
        description='The unique identifier of the [legal entity](https://docs.adyen.com/api-explorer/legalentity/latest/post/legalEntities#responses-200-id).',
    )
    merchantId: str = Field(
        ..., description='The unique identifier of the merchant account.'
    )
    status: str = Field(
        ...,
        description='The status of the merchant account.\n\nPossible values:\n\n* **PreActive**: The merchant account has been created. Users cannot access the merchant account in the Customer Area. The account cannot process payments.\n* **Active**: Users can access the merchant account in the Customer Area. If the company account is also **Active**, then payment processing and payouts are enabled.\n* **InactiveWithModifications**: Users can access the merchant account in the Customer Area. The account cannot process new payments but can still modify payments, for example issue refunds. The account can still receive payouts.\n* **Inactive**: Users can access the merchant account in the Customer Area. Payment processing and payouts are disabled.\n* **Closed**: The account is closed and this cannot be reversed. Users cannot log in. Payment processing and payouts are disabled.',
    )


class NotificationDataMessage(BaseModel):
    createdAt: datetime = Field(
        ..., description='Timestamp for when the webhook was created.'
    )
    data: AccountCreateNotificationData = Field(
        ..., description='Contains event details.'
    )
    environment: str = Field(
        ...,
        description='The environment from which the webhook originated.\n\nPossible values: **test**, **live**.',
    )
    type: str = Field(..., description='Type of notification.')


class NotificationDataMessageType2(BaseModel):
    createdAt: datetime = Field(
        ..., description='Timestamp for when the webhook was created.'
    )
    data: AccountUpdateNotificationData = Field(
        ..., description='Contains event details.'
    )
    environment: str = Field(
        ...,
        description='The environment from which the webhook originated.\n\nPossible values: **test**, **live**.',
    )
    type: str = Field(..., description='Type of notification.')
